// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"osoc-dialog/internal/api/http/v1"
	"osoc-dialog/internal/config"
	"osoc-dialog/internal/repository/dialog"
	"osoc-dialog/internal/serviceprovider"
	dialog2 "osoc-dialog/internal/usecase/dialog"
	"osoc-dialog/pkg/application"
)

// Injectors from wire.go:

func newApp() (*application.App, func(), error) {
	configConfig, err := config.GetConfig()
	if err != nil {
		return nil, nil, err
	}
	buildVersion, err := application.GetBuildVersion()
	if err != nil {
		return nil, nil, err
	}
	logger := serviceprovider.NewLogger(configConfig, buildVersion)
	engine := serviceprovider.NewBaseRouter(configConfig, logger, buildVersion)
	mysql := config.GetMysqlConfig(configConfig)
	db, cleanup, err := serviceprovider.NewMysql(mysql)
	if err != nil {
		return nil, nil, err
	}
	proxyMysql := config.GetProxyMysqlConfig(configConfig)
	mysqlProxyMysql, cleanup2, err := serviceprovider.NewProxyMysql(proxyMysql)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	repository := dialog.New(db, mysqlProxyMysql)
	service := dialog2.NewService(logger, repository)
	handler := v1.NewRouter(engine, logger, service)
	server := serviceprovider.NewHttp(handler, configConfig, logger)
	promConfig := config.GetPrometheusConfig(configConfig)
	promServer := serviceprovider.NewPrometheus(promConfig, logger)
	app := createApp(server, promServer, configConfig, logger)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
